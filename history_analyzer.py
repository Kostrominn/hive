from typing import List
from models import Person, HistoryEvent, Agent
from llm_api import call_openai
import json

history_rag_agent = Agent(
    name="HistoryRAGAgent", 
    description="–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
    instructions="""
    –¢—ã –ø–æ–ª—É—á–∞–µ—à—å:
    1. –¢–µ–º—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    2. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3-5 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞  
    3. –°–æ–±—ã—Ç–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞

    –í—ã–±–µ—Ä–∏ 2-3 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ:
    - –û–±—ä—è—Å–Ω—è—é—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —á–µ–ª–æ–≤–µ–∫–∞
    - –°–≤—è–∑–∞–Ω—ã —Å —Ç–µ–º–æ–π –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    - –§–æ—Ä–º–∏—Ä—É—é—Ç –µ–≥–æ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ
    - –í—ã–∑—ã–≤–∞—é—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫

    –í–µ—Ä–Ω–∏ JSON: {"selected_events": [1, 5, 12], "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞"}
    """,
    output_type=None
)

async def find_relevant_history_llm(
    person: Person,
    topic: str, 
    recent_messages: List[str],
    max_events: int = 10
) -> List[HistoryEvent]:
    """–¢–æ–ª—å–∫–æ LLM –ø–æ–¥—Ö–æ–¥ - –Ω–∏–∫–∞–∫–∏—Ö keywords"""
    
    if not person.full_history or len(person.full_history) == 0:
        return []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
    events_summary = []
    for event in person.full_history:
        compact = {
            "id": event.id,
            "stage": event.life_stage,
            "theme": event.theme, 
            "summary": event.summary[:100],  # –æ–±—Ä–µ–∑–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        }
        if event.emotion:
            compact["emotion"] = event.emotion
        if event.values:
            compact["values"] = event.values[:50]
        events_summary.append(compact)
    
    prompt = f"""–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –∏—Å—Ç–æ—Ä–∏—é —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –¥–∏—Å–∫—É—Å—Å–∏–∏.

–¢–µ–º–∞ –¥–∏—Å–∫—É—Å—Å–∏–∏: {topic}

–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ:
{chr(10).join(recent_messages[-5:]) if recent_messages else "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"}

–°–æ–±—ã—Ç–∏—è –∏–∑ –∂–∏–∑–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞:
{json.dumps(events_summary[:20], ensure_ascii=False, indent=1)}

–ó–ê–î–ê–ß–ê: –í—ã–±–µ—Ä–∏ {max_events} —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ:
- –û–±—ä—è—Å–Ω—è—é—Ç –ø–æ–∑–∏—Ü–∏—é —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ —Ç–µ–º–µ –¥–∏—Å–∫—É—Å—Å–∏–∏
- –§–æ—Ä–º–∏—Ä—É—é—Ç –µ–≥–æ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ 
- –°–≤—è–∑–∞–Ω—ã —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π, –≤–ª–∞—Å—Ç—å—é, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å—é, –¥–µ–Ω—å–≥–∞–º–∏

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{{"selected_events": [1, 5, 12], "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"}}

–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!"""
    
    try:
        result = call_openai([{"role": "user", "content": prompt}])
        data = json.loads(result)
        selected_ids = data.get("selected_events", [])
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ ID
        selected_events = []
        for event_id in selected_ids:
            for event in person.full_history:
                if event.id == event_id:
                    selected_events.append(event)
                    break
        
        return selected_events[:max_events]
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ LLM-RAG –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        # Fallback - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
        return person.full_history[:max_events]

def format_selected_history(events: List[HistoryEvent]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
    if not events:
        return ""
    
    formatted = []
    for event in events:
        event_str = f"üìÖ {event.life_stage}: {event.summary}"
        if event.emotion:
            event_str += f" (—á—É–≤—Å—Ç–≤–æ–≤–∞–ª: {event.emotion})"
        if event.values:
            event_str += f" (—Ü–µ–Ω–Ω–æ—Å—Ç–∏: {event.values})"
        formatted.append(event_str)
    
    return "üß† –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(formatted)
