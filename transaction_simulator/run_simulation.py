"""–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""

import asyncio
import logging
from datetime import datetime
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

from profiles_loader import load_people
from transaction_simulator.transaction_models import SimulationConfig
from transaction_simulator.life_simulator import LifeTransactionSimulator


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('transaction_simulation.log'),
        logging.StreamHandler()
    ]
)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª—é–¥–µ–π
    print("Loading people profiles...")
    people = load_people("../profiles", limit=20)
    print(f"Loaded {len(people)} people")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏–ª–∏ –≤–∑—è—Ç—å –ø–µ—Ä–≤–æ–≥–æ
    target_person = people[2]
    
    print(f"\nTarget person: {target_person.name}")
    print(f"Age: {target_person.age}, Profession: {target_person.profession}")
    print(f"Income: {target_person.income_level}, Family: {target_person.family_status}")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏
    config = SimulationConfig(
        target_person_id=target_person.id,
        start_date=datetime(2024, 1, 1),
        days=5,
        memory_window=5,
        events=[
            #{"day": 2, "type": "–¥–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã"},
            #{"day": 5, "type": "–ø–æ–≤—ã—à–µ–Ω–∏–µ"},
            {"day": 3, "type": "–¥–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã"}
        ]
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä
    print(f"\nStarting simulation for {config.days} days...")
    simulator = LifeTransactionSimulator(config, people)
    
    results = await simulator.run_simulation()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    output_file = f"simulation_{target_person.id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    simulator.save_results(output_file)
    
    # –í—ã–≤–æ–¥–∏–º –£–õ–£–ß–®–ï–ù–ù–£–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "="*50)
    print("–£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –°–ò–ú–£–õ–Ø–¶–ò–ò")
    print("="*50)
    
    analysis = results['analysis']
    spending = analysis['spending_analysis']
    social = analysis['social_analysis']
    emotions = analysis['emotional_analysis']
    patterns = analysis['behavioral_patterns']
    
    print(f"\nüìä –§–ò–ù–ê–ù–°–´:")
    print(f"–û–±—â–∏–µ —Ç—Ä–∞—Ç—ã: {spending['total_spent']:,.0f} RUB")
    print(f"–°—Ä–µ–¥–Ω–∏–π –¥–µ–Ω—å: {spending['daily_average']:,.0f} RUB")
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω: {spending['daily_min']:,.0f} - {spending['daily_max']:,.0f} RUB")
    print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {spending['transactions_count']}")
    print(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {spending['spending_volatility']:.2f}")
    print(f"–¢—Ä–µ–Ω–¥: {spending['spending_trend']}")
    
    print(f"\nüìà –ö–ê–¢–ï–ì–û–†–ò–ò –¢–†–ê–¢:")
    for category, amount in list(spending['by_category'].items())[:5]:
        percentage = spending['category_distribution'][category]
        print(f"  {category}: {amount:,.0f} RUB ({percentage:.1f}%)")
    
    print(f"\n‚è∞ –¢–†–ê–¢–´ –ü–û –í–†–ï–ú–ï–ù–ò:")
    time_data = spending['by_time']['by_amount']
    for time_period, amount in time_data.items():
        print(f"  {time_period}: {amount:,.0f} RUB")
    print(f"–ü–∏–∫ —Ç—Ä–∞—Ç: {spending['by_time']['peak_spending_time']}")
    
    print(f"\nüõí –ò–ú–ü–£–õ–¨–°–ò–í–ù–´–ï –ü–û–ö–£–ü–ö–ò:")
    impulse = spending['impulse_purchases']
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {impulse['count']}")
    print(f"–°—É–º–º–∞: {impulse['total_amount']:,.0f} RUB ({impulse['percentage']:.1f}%)")
    
    print(f"\nüë• –°–û–¶–ò–ê–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:")
    print(f"–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {social['total_interactions']}")
    print(f"–í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: {social['daily_average']:.1f}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {social['unique_contacts']}")
    print(f"–°–∞–º—ã–π —á–∞—Å—Ç—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {social['most_frequent_contact']}")
    
    print(f"\nüòä –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
    print(f"–ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {emotions['positive_days']}")
    print(f"–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {emotions['negative_days']}")
    print(f"–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {emotions['neutral_days']}")
    print(f"–û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {emotions['overall_mood']}")
    
    print(f"\nüîÑ –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –ü–ê–¢–¢–ï–†–ù–´:")
    weekday_weekend = patterns['weekday_vs_weekend']
    print(f"–°—Ä–µ–¥–Ω–∏–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å: {weekday_weekend['weekday_average']:,.0f} RUB")
    print(f"–°—Ä–µ–¥–Ω–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π: {weekday_weekend['weekend_average']:,.0f} RUB")
    if weekday_weekend['weekend_premium'] > 0:
        print(f"–ü—Ä–µ–º–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è: +{weekday_weekend['weekend_premium']:,.0f} RUB")
    
    print(f"\nüí° –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:")
    insights = analysis['insights']
    for insight in insights:
        print(f"  ‚Ä¢ {insight}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –º–µ—Å—Ç–∞
    print(f"\nüè™ –¢–û–ü –ú–ï–°–¢–ê:")
    for place, amount in list(spending['by_place'].items())[:5]:
        frequency = spending['place_frequency'][place]
        print(f"  {place}: {amount:,.0f} RUB ({frequency} –≤–∏–∑–∏—Ç–æ–≤)")
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")


if __name__ == "__main__":
    asyncio.run(main())