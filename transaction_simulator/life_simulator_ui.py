"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∂–∏–∑–Ω–∏
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ç–∞–∫ –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
"""

import argparse
import asyncio
import json
from datetime import datetime, timedelta
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import sys
# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ) –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞
sys.path.append(str(Path(__file__).parent.parent))

from models import Person
from uuid import uuid4
from transaction_simulator.life_simulator import LifeTransactionSimulator
from transaction_simulator.transaction_models import SimulationConfig
from transaction_simulator.report_generator import ReportGenerator
from flask import Flask, render_template_string, request, jsonify, Response, stream_with_context
import threading
import queue

app = Flask(__name__)
app.config["JSON_AS_ASCII"] = False

FORM_HTML = r"""
<!doctype html>
<title>Life Simulator</title>
<h1>Life Transaction Simulator</h1>
<form id="simForm">
  –ò–º—è: <input name=name value="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤"><br>
  –í–æ–∑—Ä–∞—Å—Ç: <input type=number name=age value=28><br>
  –ü–æ–ª:
  <select name=gender>
    <option value="–º—É–∂—á–∏–Ω–∞">–º—É–∂—á–∏–Ω–∞</option>
    <option value="–∂–µ–Ω—â–∏–Ω–∞">–∂–µ–Ω—â–∏–Ω–∞</option>
  </select><br>
  –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: <input name=profession value="–º–µ–Ω–µ–¥–∂–µ—Ä"><br>
  –î–æ—Ö–æ–¥:
  <select name=income>
    <option value="–Ω–∏–∑–∫–∏–π">–Ω–∏–∑–∫–∏–π</option>
    <option value="—Å—Ä–µ–¥–Ω–∏–π" selected>—Å—Ä–µ–¥–Ω–∏–π</option>
    <option value="–≤—ã—Å–æ–∫–∏–π">–≤—ã—Å–æ–∫–∏–π</option>
  </select><br>
  –î–Ω–µ–π —Å–∏–º—É–ª—è—Ü–∏–∏: <input type=number name=days value=3><br>
  <input type=submit value="–°—Ç–∞—Ä—Ç">
</form>
<pre id="output"></pre>
<script>
document.getElementById('simForm').addEventListener('submit', function(e){
  e.preventDefault();
  const params = new URLSearchParams(new FormData(e.target));
  const out = document.getElementById('output');
  out.textContent = '';
  const es = new EventSource('/simulate_stream?' + params.toString());
  es.onmessage = function(ev){
    const msg = JSON.parse(ev.data);
    if(msg.event === 'environment'){
      out.textContent += '\n\uD83D\uDD39 –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:\n';
      msg.data.close_circle.forEach(function(p){
        out.textContent += `  - ${p.name} (${p.relation}, ${p.age ?? '?'} –ª–µ—Ç)\n`;
      });
      msg.data.extended_circle.forEach(function(p){
        out.textContent += `  - ${p.name} (${p.relation}, ${p.age ?? '?'} –ª–µ—Ç)\n`;
      });
    }else if(msg.event === 'day_result'){
        out.textContent += `\n==============================\n\uD83D\uDCC5 ${msg.data.date} (${msg.data.day_context.day_of_week})\n`;
        out.textContent += `\uD83D\uDCB0 –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${msg.data.day_summary.total_spent} —Ä—É–±\n`;
        out.textContent += `\uD83D\uDE0A –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${msg.data.day_summary.mood_trajectory.slice(0,100)}...\n`;
        msg.data.social_interactions.forEach(function(si){
        si.chat.forEach(function(c){
          out.textContent += `\uD83D\uDCAC ${c.from_person}: ${c.text}\n`;
        });
        msg.data.social_interactions.forEach(function(si){
        si.chat.forEach(function(c){
          out.textContent += `\uD83D\uDCAC ${c.from_person}: ${c.text}\n`;
        });
      });
      });
  });    
    }else if(msg.event === 'complete'){
      out.textContent += '\n\u2705 –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
      es.close();
    }
  };
});
</script>
"""

def run_web_interface():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
    print("üìç –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:5001")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    app.run(debug=False, port=5001, host="0.0.0.0")


@app.route("/")
def index() -> str:
    """–í—ã–≤–æ–¥ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""
    return render_template_string(FORM_HTML)


@app.route("/simulate", methods=["POST"])
def simulate_route():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    person = Person(
        id=str(uuid4()),
        name=request.form.get("name", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤"),
        age=int(request.form.get("age", 28)),
        gender=request.form.get("gender", "–º—É–∂—á–∏–Ω–∞"),
        profession=request.form.get("profession", "–º–µ–Ω–µ–¥–∂–µ—Ä"),
        income_level=request.form.get("income", "—Å—Ä–µ–¥–Ω–∏–π"),
        family_status="–Ω–µ –∂–µ–Ω–∞—Ç",
        children=0,
        region="–ú–æ—Å–∫–≤–∞",
        city_type="–º–µ–≥–∞–ø–æ–ª–∏—Å",
    )
    days = int(request.form.get("days", 3))
    start_date = datetime.now() - timedelta(days=days - 1)
    config = SimulationConfig(
        target_person_id=person.id,
        start_date=start_date,
        days=days,
        memory_window=5,
    )

    simulator = LifeTransactionSimulator(config, [person])
    simulation_result = asyncio.run(simulator.run_simulation())
    return jsonify(simulation_result)


@app.route("/simulate_stream")
def simulate_stream_route():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –∏ —Å—Ç—Ä–∏–º–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ SSE"""
    person = Person(
        id=str(uuid4()),
        name=request.args.get("name", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤"),
        age=int(request.args.get("age", 28)),
        gender=request.args.get("gender", "–º—É–∂—á–∏–Ω–∞"),
        profession=request.args.get("profession", "–º–µ–Ω–µ–¥–∂–µ—Ä"),
        income_level=request.args.get("income", "—Å—Ä–µ–¥–Ω–∏–π"),
        family_status="–Ω–µ –∂–µ–Ω–∞—Ç",
        children=0,
        region="–ú–æ—Å–∫–≤–∞",
        city_type="–º–µ–≥–∞–ø–æ–ª–∏—Å",
    )
    days = int(request.args.get("days", 3))
    start_date = datetime.now() - timedelta(days=days - 1)
    config = SimulationConfig(
        target_person_id=person.id,
        start_date=start_date,
        days=days,
        memory_window=5,
    )

    simulator = LifeTransactionSimulator(config, [person])
    q = queue.Queue()

    def _json_safe(obj):
        return json.loads(json.dumps(obj, default=str, ensure_ascii=False))

    def progress(event_type, data):
        """Queue progress updates ensuring JSON-friendly payloads."""
        if hasattr(data, "json"):
            data = json.loads(data.json())
        elif hasattr(data, "dict"):
            data = data.dict()
        data = _json_safe(data)
        q.put({"event": event_type, "data": data})

    async def run():
        result = await simulator.run_simulation(progress_callback=progress)
        if hasattr(result, "json"):
            result = json.loads(result.json())
        elif hasattr(result, "dict"):
            result = result.dict()
        result = _json_safe(result)
        q.put({"event": "complete", "data": result})


    threading.Thread(target=lambda: asyncio.run(run()), daemon=True).start()

    def generate():
        while True:
            item = q.get()
            yield f"data: {json.dumps(item, ensure_ascii=False)}\n\n"
            if item["event"] == "complete":
                break

    return Response(stream_with_context(generate()), mimetype="text/event-stream")

async def run_console_simulation(args):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω—É
    person = Person(
        id=str(uuid4()),
        name=args.name,
        age=args.age,
        gender=args.gender,
        profession=args.profession,
        income_level=args.income,
        family_status=args.family,
        children=args.children,
        region=args.region,
        city_type=args.city_type,
    )
    
    print(f"\nüë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {person.name}, {person.age} –ª–µ—Ç, {person.profession}")
    print(f"üìç –õ–æ–∫–∞—Ü–∏—è: {person.city_type} {person.region}")
    print(f"üí∞ –î–æ—Ö–æ–¥: {person.income_level}")
    print(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è: {person.family_status}, –¥–µ—Ç–µ–π: {person.children}")
    print(f"\n‚è≥ –°–∏–º—É–ª–∏—Ä—É–µ–º {args.days} –¥–Ω–µ–π...\n")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    start_date = datetime.now() - timedelta(days=args.days-1)
    config = SimulationConfig(
        target_person_id=person.id,
        start_date=start_date,
        days=args.days,
        memory_window=5
    )
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ callback –¥–ª—è –ª–∞–π–≤-–≤—ã–≤–æ–¥–∞
    def progress(event_type, data):
        if event_type == "environment":
            print("\nüîπ –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
            for p in data.get("close_circle", []):
                print(f"  - {p['name']} ({p['relation']}, {p.get('age', '?')} –ª–µ—Ç)")
            for p in data.get("extended_circle", []):
                print(f"  - {p['name']} ({p['relation']}, {p.get('age', '?')} –ª–µ—Ç)")
        elif event_type == "day_result":
            from transaction_simulator.transaction_models import DailyResult
            result = data if isinstance(data, DailyResult) else DailyResult(**data)

            print(f"\n{'='*60}")
            print(f"üìÖ {result.date} ({result.day_context.day_of_week})")
            print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {result.day_summary.total_spent} —Ä—É–±")
            print(f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {result.day_summary.mood_trajectory[:100]}...")

            print(f"\nüë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è ({len(result.social_interactions)}):")
            for si in result.social_interactions:
                print(f"  - {si.with_person}: {si.context} ({si.emotional_impact})")
                if args.show_chats:
                    for msg in si.chat[:3]:
                        print(f"    üí¨ {msg.from_person}: {msg.text}")

            print(f"\nüõí –ü–æ–∫—É–ø–∫–∏ ({len(result.transactions)}):")
            for t in result.transactions:
                print(f"  - {t.time} {t.place}: {', '.join(t.items[:3])} - {t.amount} —Ä—É–± ({t.category})")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    simulator = LifeTransactionSimulator(config, [person])
    simulation_result = await simulator.run_simulation(progress_callback=progress)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = simulation_result['daily_results']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    if args.report:
        print(f"\n{'='*60}")
        print("üìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        print('='*60)
        report_gen = ReportGenerator(person)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞
        daily_results_objects = []
        for result_dict in results:
            from transaction_simulator.transaction_models import DailyResult
            daily_results_objects.append(DailyResult(**result_dict))
        
        report = report_gen.generate_detailed_report(daily_results_objects)
        print(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if args.output:
        output_data = {
            'person': {
                'name': person.name,
                'age': person.age,
                'gender': person.gender,
                'profession': person.profession,
                'income_level': person.income_level,
                'family_status': person.family_status,
                'children': person.children,
                'region': person.region,
                'city_type': person.city_type
            },
            'simulation_date': datetime.now().isoformat(),
            'days_simulated': args.days,
            'results': results,  # –£–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä–µ–π
            'analysis': simulation_result.get('analysis', {})  # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
        }
        
        with open(args.output, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {args.output}")

def main():
    parser = argparse.ArgumentParser(
        description='–°–∏–º—É–ª—è—Ç–æ—Ä –∂–∏–∑–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
   python run_simulator.py --web

2. –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
   python run_simulator.py

3. –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥—Ä–æ—Å—Ç–∫–∞:
   python run_simulator.py --name "–ú–∞—à–∞" --age 16 --gender "–∂–µ–Ω—â–∏–Ω–∞" --profession "—à–∫–æ–ª—å–Ω–∏—Ü–∞"

4. –°–∏–º—É–ª—è—Ü–∏—è —Å –æ—Ç—á–µ—Ç–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:
   python run_simulator.py --days 7 --report --output results.json

5. –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å —á–∞—Ç–∞–º–∏:
   python run_simulator.py --show-chats --report
"""
    )
    
    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    parser.add_argument('--web', action='store_true', 
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    parser.add_argument('--name', default='–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
                       help='–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
    parser.add_argument('--age', type=int, default=28,
                       help='–í–æ–∑—Ä–∞—Å—Ç (14-80)')
    parser.add_argument('--gender', choices=['–º—É–∂—á–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞'], 
                       default='–º—É–∂—á–∏–Ω–∞', help='–ü–æ–ª')
    parser.add_argument('--profession', default='–º–µ–Ω–µ–¥–∂–µ—Ä',
                       help='–ü—Ä–æ—Ñ–µ—Å—Å–∏—è')
    parser.add_argument('--income', choices=['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π'],
                       default='—Å—Ä–µ–¥–Ω–∏–π', help='–£—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞')
    parser.add_argument('--family', default='–Ω–µ –∂–µ–Ω–∞—Ç',
                       help='–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ')
    parser.add_argument('--children', type=int, default=0,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π')
    parser.add_argument('--region', default='–ú–æ—Å–∫–≤–∞',
                       help='–†–µ–≥–∏–æ–Ω –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è')
    parser.add_argument('--city-type', 
                       choices=['—Å–µ–ª–æ', '–º–∞–ª—ã–π –≥–æ—Ä–æ–¥', '—Å—Ä–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥', 
                               '–∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥', '–º–µ–≥–∞–ø–æ–ª–∏—Å'],
                       default='–º–µ–≥–∞–ø–æ–ª–∏—Å', help='–¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞')
    parser.add_argument('--interests', default='',
                       help='–ò–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    parser.add_argument('--traits', default='',
                       help='–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
    parser.add_argument('--days', type=int, default=3,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ (1-30)')
    parser.add_argument('--show-chats', action='store_true',
                       help='–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏')
    parser.add_argument('--report', action='store_true',
                       help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç')
    parser.add_argument('--output', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    args = parser.parse_args()
    
    if args.web:
        run_web_interface()
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é
        asyncio.run(run_console_simulation(args))

if __name__ == '__main__':
    main()