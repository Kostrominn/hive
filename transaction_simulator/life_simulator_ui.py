"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∂–∏–∑–Ω–∏
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ç–∞–∫ –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
"""

import argparse
import asyncio
import json
from datetime import datetime, timedelta
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import sys
# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ) –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞
sys.path.append(str(Path(__file__).parent.parent))

from models import Person, HistoryEvent
from profiles_loader import try_parse_json
from uuid import uuid4
from transaction_simulator.life_simulator import LifeTransactionSimulator
from transaction_simulator.transaction_models import SimulationConfig
from transaction_simulator.report_generator import ReportGenerator
from flask import Flask, render_template_string, request, jsonify, Response, stream_with_context
import threading
import queue

app = Flask(__name__)
app.config["JSON_AS_ASCII"] = False
app.config["SEND_FILE_MAX_AGE_DEFAULT"] = 0  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

FORM_HTML = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Life Simulator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        h1 {
            color: #333;
            text-align: center;
        }
        form {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .form-row {
            margin: 10px 0;
        }
        label {
            display: inline-block;
            width: 140px;
            margin-right: 10px;
        }
        input, select {
            margin: 5px 0;
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            width: 200px;
        }
        input[type="submit"] {
            background: #007bff;
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            margin-top: 10px;
            width: auto;
        }
        input[type="submit"]:hover {
            background: #0056b3;
        }
        #output {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            white-space: pre-wrap;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            max-height: 600px;
            overflow-y: auto;
        }
        .loading {
            color: #666;
            font-style: italic;
        }
    </style>
</head>
<body>
    <h1>üåü Life Transaction Simulator</h1>
    <form id="simForm">
        <div class="form-row">
            <label>–ò–º—è:</label>
            <input type="text" name="name" value="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤" required>
        </div>
        <div class="form-row">
            <label>–í–æ–∑—Ä–∞—Å—Ç:</label>
            <input type="number" name="age" value="28" min="14" max="80" required>
        </div>
        <div class="form-row">
            <label>–ü–æ–ª:</label>
            <select name="gender">
                <option value="–º—É–∂—á–∏–Ω–∞">–º—É–∂—á–∏–Ω–∞</option>
                <option value="–∂–µ–Ω—â–∏–Ω–∞">–∂–µ–Ω—â–∏–Ω–∞</option>
            </select>
        </div>
        <div class="form-row">
            <label>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</label>
            <input type="text" name="profession" value="–º–µ–Ω–µ–¥–∂–µ—Ä" required>
        </div>
        <div class="form-row">
            <label>–î–æ—Ö–æ–¥:</label>
            <select name="income">
                <option value="–Ω–∏–∑–∫–∏–π">–Ω–∏–∑–∫–∏–π</option>
                <option value="—Å—Ä–µ–¥–Ω–∏–π" selected>—Å—Ä–µ–¥–Ω–∏–π</option>
                <option value="–≤—ã—Å–æ–∫–∏–π">–≤—ã—Å–æ–∫–∏–π</option>
            </select>
        </div>
        <div class="form-row">
            <label>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</label>
            <select name="education">
                <option value="">‚Äî</option>
                <option value="—Å—Ä–µ–¥–Ω–µ–µ">—Å—Ä–µ–¥–Ω–µ–µ</option>
                <option value="—Å—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ">—Å—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ</option>
                <option value="–Ω–µ–ø–æ–ª–Ω–æ–µ –≤—ã—Å—à–µ–µ">–Ω–µ–ø–æ–ª–Ω–æ–µ –≤—ã—Å—à–µ–µ</option>
                <option value="–≤—ã—Å—à–µ–µ">–≤—ã—Å—à–µ–µ</option>
            </select>
        </div>
        <div class="form-row">
            <label>–†–µ–≥–∏–æ–Ω:</label>
            <input type="text" name="region" value="–ú–æ—Å–∫–≤–∞" required>
        </div>
        <div class="form-row">
            <label>–¢–∏–ø –≥–æ—Ä–æ–¥–∞:</label>
            <select name="city_type">
                <option value="—Å–µ–ª–æ">—Å–µ–ª–æ</option>
                <option value="–º–∞–ª—ã–π –≥–æ—Ä–æ–¥">–º–∞–ª—ã–π –≥–æ—Ä–æ–¥</option>
                <option value="—Å—Ä–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥">—Å—Ä–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥</option>
                <option value="–∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥">–∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥</option>
                <option value="–º–µ–≥–∞–ø–æ–ª–∏—Å" selected>–º–µ–≥–∞–ø–æ–ª–∏—Å</option>
            </select>
        </div>
        <div class="form-row">
            <label>–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:</label>
            <select name="family_status">
                <option value="–Ω–µ –∂–µ–Ω–∞—Ç" selected>–Ω–µ –∂–µ–Ω–∞—Ç</option>
                <option value="–∂–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º">–∂–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º</option>
                <option value="—Ä–∞–∑–≤–µ–¥–µ–Ω">—Ä–∞–∑–≤–µ–¥–µ–Ω</option>
                <option value="–≤–¥–æ–≤–µ—Ü/–≤–¥–æ–≤–∞">–≤–¥–æ–≤–µ—Ü/–≤–¥–æ–≤–∞</option>
            </select>
        </div>
        <div class="form-row">
            <label>–î–µ—Ç–µ–π:</label>
            <input type="number" name="children" value="0" min="0" max="10">
        </div>
        <div class="form-row">
            <label>–†–µ–ª–∏–≥–∏—è:</label>
            <select name="religion">
                <option value="">‚Äî</option>
                <option value="–ø—Ä–∞–≤–æ—Å–ª–∞–≤–∏–µ">–ø—Ä–∞–≤–æ—Å–ª–∞–≤–∏–µ</option>
                <option value="–∏—Å–ª–∞–º">–∏—Å–ª–∞–º</option>
                <option value="–∞—Ç–µ–∏–∑–º">–∞—Ç–µ–∏–∑–º</option>
                <option value="–¥—Ä—É–≥–æ–µ">–¥—Ä—É–≥–æ–µ</option>
            </select>
        </div>
        <div class="form-row">
            <label>–ò–¥–µ–æ–ª–æ–≥–∏—è:</label>
            <select name="ideology">
                <option value="">‚Äî</option>
                <option value="–ª–µ–≤—ã–µ">–ª–µ–≤—ã–µ</option>
                <option value="–ø—Ä–∞–≤—ã–µ">–ø—Ä–∞–≤—ã–µ</option>
                <option value="–ª–∏–±–µ—Ä–∞–ª—ã">–ª–∏–±–µ—Ä–∞–ª—ã</option>
                <option value="–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–æ—Ä—ã">–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–æ—Ä—ã</option>
            </select>
        </div>
        <div class="form-row">
            <label>–¶–∏—Ñ—Ä–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å:</label>
            <select name="digital_literacy">
                <option value="">‚Äî</option>
                <option value="–Ω–∏–∑–∫–∞—è">–Ω–∏–∑–∫–∞—è</option>
                <option value="—Å—Ä–µ–¥–Ω—è—è">—Å—Ä–µ–¥–Ω—è—è</option>
                <option value="–≤—ã—Å–æ–∫–∞—è">–≤—ã—Å–æ–∫–∞—è</option>
            </select>
        </div>
        <div class="form-row">
            <label>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</label>
            <input type="text" name="context">
        </div>
        <div class="form-row">
            <label>–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Ä–∞–º–∫–∞:</label>
            <textarea name="cognitive_frame" placeholder="–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º"></textarea>
        </div>
        <div class="form-row">
            <label>–†–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –º–∞–Ω–µ—Ä–∞:</label>
            <textarea name="rhetorical_manner" placeholder="–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º"></textarea>
        </div>
        <div class="form-row">
            <label>–¢—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏:</label>
            <input type="text" name="trigger_points" placeholder="–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º, —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é">
        </div>
        <div class="form-row">
            <label>–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è:</label>
            <textarea name="interpretation_biases" placeholder="–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º"></textarea>
        </div>
        <div class="form-row">
            <label>–í–∑–≥–ª—è–¥ –Ω–∞ —Å–µ–±—è:</label>
            <textarea name="meta_self_view" placeholder="–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º"></textarea>
        </div>
        <div class="form-row">
            <label>–†–µ—á–µ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</label>
            <textarea name="speech_profile" placeholder="–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º"></textarea>
        </div>
        <div class="form-row">
            <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã (JSON):</label>
            <textarea name="full_history" placeholder="–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º"></textarea>
        </div>
        <div class="form-row">
            <label>–î–Ω–µ–π —Å–∏–º—É–ª—è—Ü–∏–∏:</label>
            <input type="number" name="days" value="3" min="1" max="30" required>
        </div>
        <div class="form-row">
            <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</label>
            <input type="date" name="start_date">
        </div>
        <div class="form-row">
            <input type="submit" value="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é">
        </div>
    </form>
    <pre id="output"></pre>

<script>
(function() {
    'use strict';
    
    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded, initializing form handler');
        
        const form = document.getElementById('simForm');
        const output = document.getElementById('output');
        
        if (!form) {
            console.error('Form not found!');
            return;
        }
        
        form.addEventListener('submit', function(e) {
            console.log('Form submitted');
            e.preventDefault();
            e.stopPropagation();
            
            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = new FormData(form);
            const params = new URLSearchParams(formData);
            
            // –û—á–∏—â–∞–µ–º –≤—ã–≤–æ–¥
            output.textContent = '‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é...\\n';
            output.className = 'loading';
            
            // –°–æ–∑–¥–∞—ë–º EventSource
            const url = '/simulate_stream?' + params.toString();
            console.log('Connecting to:', url);
            
            const eventSource = new EventSource(url);
            
            eventSource.onopen = function() {
                console.log('EventSource connected');
                output.className = '';
            };
            
            eventSource.onmessage = function(event) {
                console.log('Received event:', event.data.substring(0, 100) + '...');
                
                try {
                    const msg = JSON.parse(event.data);
                    
                    if (msg.event === 'environment') {
                        output.textContent += '\\nüîπ –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:\\n';
                        
                        if (msg.data.close_circle && msg.data.close_circle.length > 0) {
                            output.textContent += '\\nüìç –ë–ª–∏–∑–∫–∏–π –∫—Ä—É–≥:\\n';
                            msg.data.close_circle.forEach(function(p) {
                                output.textContent += '  ‚Ä¢ ' + p.name + ' (' + p.relation + ', ' + (p.age || '?') + ' –ª–µ—Ç)';
                                if (p.description) {
                                    output.textContent += ' - ' + p.description;
                                }
                                output.textContent += '\\n';
                            });
                        }
                        
                        if (msg.data.extended_circle && msg.data.extended_circle.length > 0) {
                            output.textContent += '\\nüë• –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫—Ä—É–≥:\\n';
                            msg.data.extended_circle.forEach(function(p) {
                                output.textContent += '  ‚Ä¢ ' + p.name + ' (' + p.relation + ', ' + (p.age || '?') + ' –ª–µ—Ç)';
                                if (p.description) {
                                    output.textContent += ' - ' + p.description;
                                }
                                output.textContent += '\\n';
                            });
                        }
                        
                    } else if (msg.event === 'day_result') {
                        output.textContent += '\\n==============================\\n';
                        output.textContent += 'üìÖ ' + msg.data.date + ' (' + msg.data.day_context.day_of_week + ')\\n';
                        output.textContent += 'üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ' + Math.round(msg.data.day_summary.total_spent) + ' —Ä—É–±\\n';
                        output.textContent += 'üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ' + msg.data.day_summary.mood_trajectory + '\\n';
                        
                        // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                        if (msg.data.social_interactions && msg.data.social_interactions.length > 0) {
                            output.textContent += '\\nüë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\\n';
                            msg.data.social_interactions.forEach(function(si) {
                                output.textContent += '  ‚Ä¢ ' + si.with_person + ': ' + si.context + ' (' + si.emotional_impact + ')\\n';
                                
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞
                                if (si.chat && si.chat.length > 0) {
                                    const maxMessages = Math.min(2, si.chat.length);
                                    for (let i = 0; i < maxMessages; i++) {
                                        const c = si.chat[i];
                                        output.textContent += '    üí¨ ' + c.from_person + ': ' + c.text + '\\n';
                                    }
                                    if (si.chat.length > 2) {
                                        output.textContent += '    ... (–µ—â—ë ' + (si.chat.length - 2) + ' —Å–æ–æ–±—â–µ–Ω–∏–π)\\n';
                                    }
                                }
                            });
                        }
                        
                        // –ü–æ–∫—É–ø–∫–∏
                        if (msg.data.transactions && msg.data.transactions.length > 0) {
                            output.textContent += '\\nüõí –ü–æ–∫—É–ø–∫–∏:\\n';
                            msg.data.transactions.forEach(function(t) {
                                const itemsPreview = t.items.slice(0, 3).join(', ');
                                const moreItems = t.items.length > 3 ? ' –∏ –µ—â—ë ' + (t.items.length - 3) : '';
                                output.textContent += '  ‚Ä¢ ' + t.time + ' ' + t.place + ': ' + itemsPreview + moreItems + ' - ' + Math.round(t.amount) + ' —Ä—É–± (' + t.category + ')\\n';
                            });
                        }
                        
                        // –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
                        if (msg.data.day_summary.key_moments && msg.data.day_summary.key_moments.length > 0) {
                            output.textContent += '\\n‚ú® –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:\\n';
                            msg.data.day_summary.key_moments.forEach(function(moment) {
                                output.textContent += '  ‚Ä¢ ' + moment + '\\n';
                            });
                        }
                        
                    } else if (msg.event === 'complete') {
                        output.textContent += '\\n\\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\\n';
                        
                        // –ö—Ä–∞—Ç–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                        if (msg.data.analysis && msg.data.analysis.insights) {
                            output.textContent += '\\nüìä –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:\\n';
                            msg.data.analysis.insights.forEach(function(insight) {
                                output.textContent += '  ‚Ä¢ ' + insight + '\\n';
                            });
                        }
                        
                        eventSource.close();
                        console.log('Simulation completed, closing connection');
                    }
                    
                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
                    output.scrollTop = output.scrollHeight;
                    
                } catch (error) {
                    console.error('Error parsing message:', error);
                    output.textContent += '\\n‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message + '\\n';
                }
            };
            
            eventSource.onerror = function(error) {
                console.error('EventSource error:', error);
                output.textContent += '\\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.\\n';
                eventSource.close();
            };
            
            return false;
        });
    });
})();
</script>

</body>
</html>
"""

def run_web_interface():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
    print("üìç –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:5001")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    app.run(debug=False, port=5001, host="0.0.0.0")


@app.route("/")
def index() -> str:
    """–í—ã–≤–æ–¥ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""
    return render_template_string(FORM_HTML)


@app.route("/simulate", methods=["POST"])
def simulate_route():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    person = Person(
        id=str(uuid4()),
        name=request.form.get("name", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤"),
        age=int(request.form.get("age", 28)),
        gender=request.form.get("gender", "–º—É–∂—á–∏–Ω–∞"),
        profession=request.form.get("profession", "–º–µ–Ω–µ–¥–∂–µ—Ä"),
        income_level=request.form.get("income", "—Å—Ä–µ–¥–Ω–∏–π"),
        family_status=request.form.get("family_status", "–Ω–µ –∂–µ–Ω–∞—Ç"),
        children=int(request.form.get("children", 0)),
        region=request.form.get("region", "–ú–æ—Å–∫–≤–∞"),
        city_type=request.form.get("city_type", "–º–µ–≥–∞–ø–æ–ª–∏—Å"),
        education=request.form.get("education"),
        employment=None,
        religion=request.form.get("religion"),
        ideology=request.form.get("ideology"),
        digital_literacy=request.form.get("digital_literacy"),
        context=request.form.get("context"),
        cognitive_frame=try_parse_json(request.form.get("cognitive_frame")),
        rhetorical_manner=try_parse_json(request.form.get("rhetorical_manner")),
        trigger_points=(
            try_parse_json(request.form.get("trigger_points"))
            if request.form.get("trigger_points", "").strip().startswith("[")
            else [tp.strip() for tp in request.form.get("trigger_points", "").split(",") if tp.strip()] if request.form.get("trigger_points") else None
        ),
        interpretation_biases=try_parse_json(request.form.get("interpretation_biases")),
        meta_self_view=try_parse_json(request.form.get("meta_self_view")),
        speech_profile=try_parse_json(request.form.get("speech_profile")),
        full_history=[HistoryEvent(**ev) for ev in try_parse_json(request.form.get("full_history")) or []] if request.form.get("full_history") else None,
    )
    days = int(request.form.get("days", 3))
    sd = request.form.get("start_date")
    if sd:
        start_date = datetime.strptime(sd, "%Y-%m-%d")
    else:
        start_date = datetime.now() - timedelta(days=days - 1)
    config = SimulationConfig(
        target_person_id=person.id,
        start_date=start_date,
        days=days,
        memory_window=5,
    )

    simulator = LifeTransactionSimulator(config, [person])
    simulation_result = asyncio.run(simulator.run_simulation())
    return jsonify(simulation_result)


@app.route("/simulate_stream")
def simulate_stream_route():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –∏ —Å—Ç—Ä–∏–º–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ SSE"""
    # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    person = Person(
        id=str(uuid4()),
        name=request.args.get("name", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤"),
        age=int(request.args.get("age", 28)),
        gender=request.args.get("gender", "–º—É–∂—á–∏–Ω–∞"),
        profession=request.args.get("profession", "–º–µ–Ω–µ–¥–∂–µ—Ä"),
        income_level=request.args.get("income", "—Å—Ä–µ–¥–Ω–∏–π"),
        family_status=request.args.get("family_status", "–Ω–µ –∂–µ–Ω–∞—Ç"),
        children=int(request.args.get("children", 0)),
        region=request.args.get("region", "–ú–æ—Å–∫–≤–∞"),
        city_type=request.args.get("city_type", "–º–µ–≥–∞–ø–æ–ª–∏—Å"),
        education=request.args.get("education"),
        employment=None,
        religion=request.args.get("religion"),
        ideology=request.args.get("ideology"),
        digital_literacy=request.args.get("digital_literacy"),
        context=request.args.get("context"),
        cognitive_frame=try_parse_json(request.args.get("cognitive_frame")),
        rhetorical_manner=try_parse_json(request.args.get("rhetorical_manner")),
        trigger_points=(
            try_parse_json(request.args.get("trigger_points"))
            if request.args.get("trigger_points", "").strip().startswith("[")
            else [tp.strip() for tp in request.args.get("trigger_points", "").split(",") if tp.strip()] if request.args.get("trigger_points") else None
        ),
        interpretation_biases=try_parse_json(request.args.get("interpretation_biases")),
        meta_self_view=try_parse_json(request.args.get("meta_self_view")),
        speech_profile=try_parse_json(request.args.get("speech_profile")),
        full_history=[HistoryEvent(**ev) for ev in try_parse_json(request.args.get("full_history")) or []] if request.args.get("full_history") else None,
    )
    
    days = int(request.args.get("days", 3))
    sd = request.args.get("start_date")
    if sd:
        start_date = datetime.strptime(sd, "%Y-%m-%d")
    else:
        start_date = datetime.now() - timedelta(days=days - 1)
    config = SimulationConfig(
        target_person_id=person.id,
        start_date=start_date,
        days=days,
        memory_window=5,
    )

    simulator = LifeTransactionSimulator(config, [person])
    q = queue.Queue()

    def _json_safe(obj):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON"""
        return json.loads(json.dumps(obj, default=str, ensure_ascii=False))

    def progress(event_type, data):
        """Callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        print(f"Progress event: {event_type}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-safe —Ñ–æ—Ä–º–∞—Ç
        if hasattr(data, "json"):
            data = json.loads(data.json())
        elif hasattr(data, "dict"):
            data = data.dict()
        
        data = _json_safe(data)
        q.put({"event": event_type, "data": data})

    async def run():
        """–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            result = await simulator.run_simulation(progress_callback=progress)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if hasattr(result, "json"):
                result = json.loads(result.json())
            elif hasattr(result, "dict"):
                result = result.dict()
            
            result = _json_safe(result)
            q.put({"event": "complete", "data": result})
        except Exception as e:
            print(f"Error in simulation: {e}")
            import traceback
            traceback.print_exc()
            q.put({"event": "error", "data": {"message": str(e)}})

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=lambda: asyncio.run(run()), daemon=True).start()

    def generate():
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä SSE —Å–æ–±—ã—Ç–∏–π"""
        while True:
            try:
                item = q.get(timeout=30)  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                yield f"data: {json.dumps(item, ensure_ascii=False)}\n\n"
                if item["event"] in ["complete", "error"]:
                    break
            except queue.Empty:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                yield f"data: {json.dumps({'event': 'heartbeat'})}\n\n"

    return Response(
        stream_with_context(generate()), 
        mimetype="text/event-stream",
        headers={
            'Cache-Control': 'no-cache',
            'X-Accel-Buffering': 'no'  # –î–ª—è nginx
        }
    )

async def run_console_simulation(args):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω—É
    person = Person(
        id=str(uuid4()),
        name=args.name,
        age=args.age,
        gender=args.gender,
        profession=args.profession,
        income_level=args.income,
        family_status=args.family,
        children=args.children,
        region=args.region,
        city_type=args.city_type,
        education=args.education,
        employment=args.employment,
        religion=args.religion,
        ideology=args.ideology,
        digital_literacy=args.digital_literacy,
        context=args.context,
        cognitive_frame=try_parse_json(args.cognitive_frame),
        rhetorical_manner=try_parse_json(args.rhetorical_manner),
        trigger_points=(
            try_parse_json(args.trigger_points)
            if args.trigger_points and args.trigger_points.strip().startswith("[")
            else [tp.strip() for tp in args.trigger_points.split(",") if tp.strip()] if args.trigger_points else None
        ),
        interpretation_biases=try_parse_json(args.interpretation_biases),
        meta_self_view=try_parse_json(args.meta_self_view),
        speech_profile=try_parse_json(args.speech_profile),
        full_history=[HistoryEvent(**ev) for ev in try_parse_json(args.full_history) or []] if args.full_history else None,
    )
    
    print(f"\nüë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {person.name}, {person.age} –ª–µ—Ç, {person.profession}")
    print(f"üìç –õ–æ–∫–∞—Ü–∏—è: {person.city_type} {person.region}")
    print(f"üí∞ –î–æ—Ö–æ–¥: {person.income_level}")
    print(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è: {person.family_status}, –¥–µ—Ç–µ–π: {person.children}")
    print(f"\n‚è≥ –°–∏–º—É–ª–∏—Ä—É–µ–º {args.days} –¥–Ω–µ–π...\n")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if args.start_date:
        start_date = datetime.strptime(args.start_date, "%Y-%m-%d")
    else:
        start_date = datetime.now() - timedelta(days=args.days-1)
    config = SimulationConfig(
        target_person_id=person.id,
        start_date=start_date,
        days=args.days,
        memory_window=5
    )
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ callback –¥–ª—è –ª–∞–π–≤-–≤—ã–≤–æ–¥–∞
    def progress(event_type, data):
        if event_type == "environment":
            print("\nüîπ –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
            for p in data.get("close_circle", []):
                print(f"  - {p['name']} ({p['relation']}, {p.get('age', '?')} –ª–µ—Ç)")
            for p in data.get("extended_circle", []):
                print(f"  - {p['name']} ({p['relation']}, {p.get('age', '?')} –ª–µ—Ç)")
        elif event_type == "day_result":
            from transaction_simulator.transaction_models import DailyResult
            result = data if isinstance(data, DailyResult) else DailyResult(**data)

            print(f"\n{'='*60}")
            print(f"üìÖ {result.date} ({result.day_context.day_of_week})")
            print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {result.day_summary.total_spent} —Ä—É–±")
            print(f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {result.day_summary.mood_trajectory[:100]}...")

            print(f"\nüë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è ({len(result.social_interactions)}):")
            for si in result.social_interactions:
                print(f"  - {si.with_person}: {si.context} ({si.emotional_impact})")
                if args.show_chats:
                    for msg in si.chat[:3]:
                        print(f"    üí¨ {msg.from_person}: {msg.text}")

            print(f"\nüõí –ü–æ–∫—É–ø–∫–∏ ({len(result.transactions)}):")
            for t in result.transactions:
                print(f"  - {t.time} {t.place}: {', '.join(t.items[:3])} - {t.amount} —Ä—É–± ({t.category})")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    simulator = LifeTransactionSimulator(config, [person])
    simulation_result = await simulator.run_simulation(progress_callback=progress)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = simulation_result['daily_results']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    if args.report:
        print(f"\n{'='*60}")
        print("üìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        print('='*60)
        report_gen = ReportGenerator(person)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞
        daily_results_objects = []
        for result_dict in results:
            from transaction_simulator.transaction_models import DailyResult
            daily_results_objects.append(DailyResult(**result_dict))
        
        report = report_gen.generate_detailed_report(daily_results_objects)
        print(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if args.output:
        output_data = {
            'person': {
                'name': person.name,
                'age': person.age,
                'gender': person.gender,
                'profession': person.profession,
                'income_level': person.income_level,
                'family_status': person.family_status,
                'children': person.children,
                'region': person.region,
                'city_type': person.city_type
            },
            'simulation_date': datetime.now().isoformat(),
            'days_simulated': args.days,
            'results': results,  # –£–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä–µ–π
            'analysis': simulation_result.get('analysis', {})  # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
        }
        
        with open(args.output, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {args.output}")

def main():
    parser = argparse.ArgumentParser(
        description='–°–∏–º—É–ª—è—Ç–æ—Ä –∂–∏–∑–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
   python run_simulator.py --web

2. –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
   python run_simulator.py

3. –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥—Ä–æ—Å—Ç–∫–∞:
   python run_simulator.py --name "–ú–∞—à–∞" --age 16 --gender "–∂–µ–Ω—â–∏–Ω–∞" --profession "—à–∫–æ–ª—å–Ω–∏—Ü–∞"

4. –°–∏–º—É–ª—è—Ü–∏—è —Å –æ—Ç—á–µ—Ç–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:
   python run_simulator.py --days 7 --report --output results.json

5. –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å —á–∞—Ç–∞–º–∏:
   python run_simulator.py --show-chats --report
"""
    )
    
    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    parser.add_argument('--web', action='store_true', 
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    parser.add_argument('--name', default='–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
                       help='–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
    parser.add_argument('--age', type=int, default=28,
                       help='–í–æ–∑—Ä–∞—Å—Ç (14-80)')
    parser.add_argument('--gender', choices=['–º—É–∂—á–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞'], 
                       default='–º—É–∂—á–∏–Ω–∞', help='–ü–æ–ª')
    parser.add_argument('--profession', default='–º–µ–Ω–µ–¥–∂–µ—Ä',
                       help='–ü—Ä–æ—Ñ–µ—Å—Å–∏—è')
    parser.add_argument('--income', choices=['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π'],
                       default='—Å—Ä–µ–¥–Ω–∏–π', help='–£—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞')
    parser.add_argument('--family', default='–Ω–µ –∂–µ–Ω–∞—Ç',
                       help='–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ')
    parser.add_argument('--children', type=int, default=0,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π')
    parser.add_argument('--region', default='–ú–æ—Å–∫–≤–∞',
                       help='–†–µ–≥–∏–æ–Ω –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è')
    parser.add_argument('--city-type', 
                       choices=['—Å–µ–ª–æ', '–º–∞–ª—ã–π –≥–æ—Ä–æ–¥', '—Å—Ä–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥', 
                               '–∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥', '–º–µ–≥–∞–ø–æ–ª–∏—Å'],
                       default='–º–µ–≥–∞–ø–æ–ª–∏—Å', help='–¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞')
    parser.add_argument('--interests', default='',
                       help='–ò–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    parser.add_argument('--traits', default='',
                       help='–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    parser.add_argument('--education', help='–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--employment', help='–ü—Ä–æ—Ñ–µ—Å—Å–∏—è')
    parser.add_argument('--religion', help='–†–µ–ª–∏–≥–∏—è')
    parser.add_argument('--ideology', help='–ò–¥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∑–≥–ª—è–¥—ã')
    parser.add_argument('--digital-literacy', dest='digital_literacy',
                       help='–¶–∏—Ñ—Ä–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å')
    parser.add_argument('--context', help='–ë—ã—Ç–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç')
    parser.add_argument('--cognitive-frame', dest='cognitive_frame',
                       help='–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Ä–∞–º–∫–∞ (JSON)')
    parser.add_argument('--rhetorical-manner', dest='rhetorical_manner',
                       help='–†–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –º–∞–Ω–µ—Ä–∞ (JSON)')
    parser.add_argument('--trigger-points', dest='trigger_points',
                       help='–¢—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏ (JSON –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
    parser.add_argument('--interpretation-biases', dest='interpretation_biases',
                       help='–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è (JSON)')
    parser.add_argument('--meta-self-view', dest='meta_self_view',
                       help='–í–∑–≥–ª—è–¥ –Ω–∞ —Å–µ–±—è (JSON)')
    parser.add_argument('--speech-profile', dest='speech_profile',
                       help='–†–µ—á–µ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (JSON)')
    parser.add_argument('--full-history', dest='full_history',
                       help='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã (JSON —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π)')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
    parser.add_argument('--days', type=int, default=3,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ (1-30)')
    parser.add_argument('--start-date',
                       help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ YYYY-MM-DD')
    parser.add_argument('--show-chats', action='store_true',
                       help='–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏')
    parser.add_argument('--report', action='store_true',
                       help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç')
    parser.add_argument('--output', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    args = parser.parse_args()
    
    if args.web:
        run_web_interface()
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é
        asyncio.run(run_console_simulation(args))

if __name__ == '__main__':
    main()